#!/usr/bin/env swipl
% -*- mode: prolog;-*-

:- initialization(main).

:- use_module(library(filesex)).

% Set up access to the libraries
:- prolog_load_context(directory, Dir),
   atomic_list_concat([Dir,'/../library'],One_Up),
   absolute_file_name(One_Up,Lib),
   asserta(user:file_search_path(library, Lib)).

:- use_module(library(crypto)).
:- use_module(library(process)).
:- use_module(library(optparse)).
:- use_module(library(terminus_store)).
:- use_module(library(semweb/turtle)).
:- use_module(library(literals)).

/*****************************************************
 * Utils
 *****************************************************/

/*
 * command(Cmd) is semidet.
 *
 * True if Cmd exists.
 */
command(Cmd) :-
    catch(
        (   process_create(path(Cmd), [], [ stderr(null),
                                            stdout(null),
                                            process(PID)
                                          ]),
            process_wait(PID,_Status)),
        error(existence_error(source_sink,path(Cmd)),_),
        fail).

hostname(Hostname) :-
    (   command(hostname)
    ->  process_create(path(hostname), ['-f'], [ stderr(null),
                                                 stdout(pipe(Out)),
                                                 process(PID)
                                               ]),
        process_wait(PID,_Status),
        (   read_string(Out, '\n', '\r', _, Hostname_String)
        ->  atom_string(Hostname,Hostname_String)
        ;   Hostname = localhost)
    ;   Hostname = localhost).

safe_create_named_graph(Store,Graph_ID,Graph_Obj) :-
    www_form_encode(Graph_ID,Safe_Graph_ID),
    create_named_graph(Store,Safe_Graph_ID,Graph_Obj).

/**
 * create_graph_from_turtle(DB:database, Graph_ID:graph_identifier, Turtle:string) is det.
 *
 * Reads in Turtle String and writes initial database.
 */
create_graph_from_turtle(Path, Graph_ID, TTL_Path) :-
    open_directory_store(Path,Store),
    safe_create_named_graph(Store,Graph_ID,Graph_Obj),
    open_write(Store, Builder),

    % write to a temporary builder.
    rdf_process_turtle(
        TTL_Path,
        {Builder}/
        [Triples,_Resource]>>(
            forall(member(T, Triples),
                   (   normalise_triple(T, rdf(X,P,Y)),
                       object_storage(Y,S),
                       nb_add_triple(Builder, X, P, S)))),
        []),
    % commit this builder to a temporary layer to perform a diff.
    nb_commit(Builder,Layer),
    nb_set_head(Graph_Obj, Layer).


/*****************************************************
 * Opts
 *****************************************************/
opt_spec([[opt(help),
           type(boolean),
           shortflags([h]),
           longflags([help]),
           default(false),
           help('print this help')],

          [opt(onlyconfig),
           type(boolean),
           shortflags([n]),
           longflags(['only-config']),
           default(false),
           help('Only generate config file, not database')],

          [opt(server),
           type(atom),
           shortflags([s]),
           longflags([server]),
           default(''),
           help('set the server name')],

          [opt(workers),
           type(integer),
           shortflags([w]),
           longflags([workers]),
           default(8),
           help('set the amount of server workers')],

          [opt(port),
           type(integer),
           shortflags([p]),
           longflags([port]),
           default(6363),
           help('set the server port')],

          [opt(protocol),
           type(atom),
           longflags([protocol]),
           default(http),
           help('set the protocol used by the server')],

          [opt(key),
           type(atom),
           shortflags([k]),
           longflags([key]),
           default(admin),
           help('key of admin user')]]).

/*
 * help(+Cmd:atom,-Help:atom) is det.
 */
help(Cmd,Spec,Help) :-
    file_base_name(Cmd,Name),
    opt_help(Spec,Help_Text),
    format(atom(Help),'Usage: ~s [OPTIONS]

Set the administrative key - necessary before superuser can begin to set other permissions

~s', [Name,Help_Text]).

/*****************************************************
 * Paths and Main
 *****************************************************/

example_instance_ttl(Dir,Path) :-
    atomic_list_concat([Dir,'/terminus_instance_template.ttl'], Path).

example_inference_ttl(Dir,Path) :-
    atomic_list_concat([Dir,'/terminus_inference_template.ttl'], Path).

example_schema_ttl(Dir,Path) :-
    atomic_list_concat([Dir,'/../terminus-schema/terminus.owl.ttl'], Path).

database_path(Dir,Path) :-
    atomic_list_concat([Dir,'/../storage/db/'], Pre_Path),
    absolute_file_name(Pre_Path,Path).

instance_path(Dir,Path) :-
    atomic_list_concat([Dir,'/../tmp/instance.ttl'], Path).

instance_name(Host,Name) :-
    atomic_list_concat(['http://',Host,'/terminus/document'],Name).

config_path(Dir,Path) :-
    atomic_list_concat([Dir, '/../config/config.pl'], Path).

config_template_path(Dir,Path) :-
    atomic_list_concat([Dir, '/config-template.tpl'], Path).

index_path(Dir,Path) :-
    atomic_list_concat([Dir, '/../storage/index.html'], Path).

index_template_path(Dir,Path) :-
    atomic_list_concat([Dir, '/../index.tpl'], Path).

inference_path(Dir,Path) :-
    atomic_list_concat([Dir,'/../tmp/inference.ttl'], Path).

inference_name(Host,Name) :-
    atomic_list_concat(['http://',Host,'/terminus/inference'],Name).

ttl_path(Dir, Path) :-
    atomic_list_concat([Dir,'1-ckp.ttl'], Path).

schema_path(Dir,Path) :-
    atomic_list_concat([Dir,'/../tmp/schema.ttl'], Path).

schema_name(Host,Name) :-
    atomic_list_concat(['http://',Host,'/terminus/schema'],Name).

replace_in_file(Path, Pattern, With) :-
    read_file_to_string(Path, FileString, []),
    atomic_list_concat(Split, Pattern, FileString),
    atomic_list_concat(Split, With, NewFileString),
    open(Path, write, FileStream),
    write(FileStream, NewFileString),
    close(FileStream).

write_config_file(Config_Tpl_Path, Config_Path, Server_Name, Port, Workers) :-
    open(Config_Tpl_Path, read, Tpl_Stream),
    read_string(Tpl_Stream, _, Tpl_String),
    close(Tpl_Stream),
    open(Config_Path, write, Stream),
    format(Stream, Tpl_String, [Server_Name, Port, Workers]),
    close(Stream).

write_index_file(Index_Tpl_Path, Index_Path, Protocol, Server_Name, Port, Key) :-
    open(Index_Tpl_Path, read, Tpl_Stream),
    read_string(Tpl_Stream, _, Tpl_String),
    close(Tpl_Stream),
    open(Index_Path, write, Stream),
    format(Stream, Tpl_String, [Protocol,Server_Name,Port,Key]),
    close(Stream).

initialize_database(Server, Port, Protocol, Key, Dir) :-
        example_instance_ttl(Dir,Example_Instance_TTL),

        example_inference_ttl(Dir,Example_Inference_TTL),
        example_schema_ttl(Dir,Example_Schema_TTL),

        atomic_list_concat([Server, ":", Port], ServerPort),

        database_path(Dir,DB_Path),
        make_directory_path(DB_Path),
        delete_directory_contents(DB_Path),

        instance_path(Dir,Instance_TTL_Path),
        inference_path(Dir,Inference_TTL_Path),
        schema_path(Dir,Schema_TTL_Path),

        index_template_path(Dir, Index_Tpl_Path),
        index_path(Dir,Index_Path),

        crypto_password_hash(Key,Hash, [cost(15)]),
        write_index_file(Index_Tpl_Path, Index_Path, Protocol, Server,
                         Port, Key),

        copy_file(Example_Instance_TTL, Instance_TTL_Path),
        copy_file(Example_Inference_TTL, Inference_TTL_Path),
        copy_file(Example_Schema_TTL, Schema_TTL_Path),
        replace_in_file(Instance_TTL_Path, "SEKRET_ADMIN_KEY", Hash),
        replace_in_file(Inference_TTL_Path, "SERVER_NAME", ServerPort),
        replace_in_file(Instance_TTL_Path, "SERVER_NAME", ServerPort),
        replace_in_file(Schema_TTL_Path, "SERVER_NAME", ServerPort),

        instance_name(ServerPort,Instance_Name),
        create_graph_from_turtle(DB_Path,Instance_Name,Instance_TTL_Path),
        schema_name(ServerPort,Schema_Name),
        create_graph_from_turtle(DB_Path,Schema_Name,Schema_TTL_Path),
        inference_name(ServerPort,Inference_Name),
        create_graph_from_turtle(DB_Path,Inference_Name,Inference_TTL_Path),
        format('Successfully updated admin key!!~n').


program(Prog) :-
    current_prolog_flag(associated_file,Prog).

main(Args) :-

    program(Prog),
    opt_spec(Spec),
    opt_parse(Spec,Args,Opts,_),
    help(Prog,Spec,Help_Text),

    (   memberchk(help(true), Opts)
    ->  write(Help_Text),
        halt
    ;   memberchk(key(admin), Opts)
    ->  format('~nThink of a better administrator key please...~n~n'),
        write(Help_Text),
        halt
    ;   memberchk(key(Key), Opts),
        file_directory_name(Prog, Dir),

        memberchk(server(Server_Arg), Opts),
        (   Server_Arg = ''
        ->  (   hostname(Server)
            ->  true
            ;   Server = localhost
            )
        ;   Server = Server_Arg),
        memberchk(port(Port), Opts),
        memberchk(workers(Workers), Opts),
        memberchk(protocol(Protocol), Opts),
        config_template_path(Dir, Config_Tpl_Path),
        config_path(Dir,Config_Path),
        write_config_file(Config_Tpl_Path, Config_Path, Server,
                          Port, Workers),
        (   memberchk(onlyconfig(false), Opts)
        ->  initialize_database(Server, Port, Protocol, Key, Dir)
        ;   true
        ),
        halt
    ).
